{
	"info": {
		"_postman_id": "fa71571f-b7f1-4be0-2c6f-5aee76508e1c",
		"name": "Chanter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Modules",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						""
					]
				},
				"description": "Get Mdules"
			},
			"response": []
		},
		{
			"name": "Get Module New Test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Requirements for current baseline",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test/baselines/current",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test",
						"baselines",
						"current"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49218484-a1e5-48fe-91d4-dc677d7c558a",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    postman.setGlobalVariable(\"module_id\", jsonData.guid);",
							"    ",
							"    pm.expect(jsonData.name).to.be.not.null;",
							"    postman.setGlobalVariable(\"module_name\", jsonData.name)",
							"    console.log(postman.getGlobalVariable(\"module_id\"));",
							"    ",
							"    pm.expect(jsonData.createdDate).to.be.not.null;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"New Test\",\n  \"description\": \"Description for New Test\"\n}"
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add first requirement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35f6f479-e1e6-4bc8-8b5a-84c631be27a4",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    postman.setGlobalVariable(\"first_req_id\", jsonData.guid);",
							"    ",
							"    pm.expect(jsonData.created).to.be.not.null;",
							"    pm.expect(jsonData.updated).to.be.not.null;",
							"    pm.expect(jsonData.version).to.be.equal(1);",
							"});",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"This is my first requirement {{module_id}}\",\n  \"name\": \"Requirement Name\"\n}"
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test"
					]
				},
				"description": "Create Requirement"
			},
			"response": []
		},
		{
			"name": "Add attribute to module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b9897df-5f7b-46e7-8057-fffbba8c5e83",
						"exec": [
							"pm.test(\"Status code is 204\", function () { ",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test/attributes?attName=attribute1&attType=STRING&attDefaultValue=default_value",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test",
						"attributes"
					],
					"query": [
						{
							"key": "attName",
							"value": "attribute1"
						},
						{
							"key": "attType",
							"value": "STRING"
						},
						{
							"key": "attDefaultValue",
							"value": "default_value"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "71893557-0a46-47ac-bc93-2abf7d9a2c94",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.attribute1).to.exist;",
							"    pm.expect(jsonData.attribute1.name).to.be.equal(\"attribute1\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test/attributes",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test",
						"attributes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add second requirement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbe586d3-6bc5-4bde-974e-f647d3d255b6",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    postman.setGlobalVariable(\"second_req_id\", jsonData.guid);",
							"    ",
							"    pm.expect(jsonData.created).to.be.not.null;",
							"    pm.expect(jsonData.updated).to.be.not.null;",
							"    pm.expect(jsonData.version).to.be.equal(1);",
							"    ",
							"    pm.expect(jsonData.attributes).to.exist;",
							"    pm.expect(jsonData.attributes.attribute1).to.exist;",
							"});",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"This is my second requirement in {{module_id}}\",\n  \"name\": \"Second Requirement\",\n  \"attributes\" : {\n\t\"attribute1\": \"This is the first use of this parameter\"\n  }\n}"
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test?",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test"
					],
					"query": [
						{
							"key": "module",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "Create Requirement"
			},
			"response": []
		},
		{
			"name": "Add third requirement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d91b2299-951e-4df1-84cb-7d696ed8bf58",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    postman.setGlobalVariable(\"second_req_guid\", jsonData.guid);",
							"    ",
							"    pm.expect(jsonData.created).to.be.not.null;",
							"    pm.expect(jsonData.updated).to.be.not.null;",
							"    pm.expect(jsonData.version).to.be.equal(1);",
							"    ",
							"    pm.expect(jsonData.attributes).to.exist;",
							"    pm.expect(jsonData.attributes.attribute1).to.exist;",
							"    pm.expect(jsonData.attributes.attribute1).to.be.equal(\"default_value\");",
							"});",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"This is my third requirement {{module_id}}\",\n  \"name\": \"Third one\"\n}"
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test?",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test"
					],
					"query": [
						{
							"key": "module",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "Create Requirement"
			},
			"response": []
		},
		{
			"name": "Update first requirement",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb4c9969-e910-4a42-8196-522829969a40",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    postman.setGlobalVariable(\"second_req_guid\", jsonData.guid);",
							"    ",
							"    pm.expect(jsonData.created).to.be.not.null;",
							"    pm.expect(jsonData.updated).to.be.not.null;",
							"    ",
							"    // we also expect the created and updated dates to be different",
							"    pm.expect(jsonData.created).to.be.not.equal(jsonData.updated);",
							"    ",
							"    // Version should be 2",
							"    pm.expect(jsonData.version).to.be.equal(2);",
							"    ",
							"    // name should have been updated",
							"    pm.expect(jsonData.name).to.be.equal(\"updated\");",
							"    ",
							"    pm.expect(jsonData.attributes).to.exist;",
							"    pm.expect(jsonData.attributes.attribute1).to.exist;",
							"    pm.expect(jsonData.attributes.attribute1).to.be.equal(\"default_value\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"guid\":\"{{first_req_id}}\",\n  \"text\": \"This is my first requirement {{module_id}} - updated in Chanter test - version should be 2\",\n  \"name\": \"updated\"\n}"
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test/requirements?",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test",
						"requirements"
					],
					"query": [
						{
							"key": "module",
							"value": "test",
							"disabled": true
						}
					]
				},
				"description": "Create Requirement"
			},
			"response": []
		},
		{
			"name": "Delete module",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb4c9969-e910-4a42-8196-522829969a40",
						"exec": [
							"pm.test(\"Status code is 200\", function () { ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function (){",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Document is well formed\", function(){",
							"    var jsonData = JSON.parse(responseBody);",
							"    pm.expect(jsonData.guid).to.be.not.null;",
							"    pm.expect(jsonData.guid).to.be.equal(postman.getGlobalVariable(\"module_id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{chanter_ip}}/chanter/New Test?",
					"protocol": "http",
					"host": [
						"{{chanter_ip}}"
					],
					"path": [
						"chanter",
						"New Test"
					],
					"query": [
						{
							"key": "module",
							"value": "test",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3b3e6d76-ef56-4eae-b6ec-836d3aed9bf5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "48df63c6-7475-4e16-a7e0-77aa2be4aad7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d7e213df-5360-4d65-921e-106245edaec1",
			"key": "HostIp",
			"value": "192.168.99.100",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}